// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GuruxFeautureTestCasesBDD_V01.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class RDSFeature : object, Xunit.IClassFixture<RDSFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "RDS.feature"
#line hidden
        
        public RDSFeature(RDSFeature.FixtureData fixtureData, GuruxFeautureTestCasesBDD_V01_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "RDS", "\tTest cases regarding remote disconnect switch", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Control mode switches for mode 0")]
        [Xunit.TraitAttribute("FeatureTitle", "RDS")]
        [Xunit.TraitAttribute("Description", "Control mode switches for mode 0")]
        [Xunit.InlineDataAttribute("0", "1", "Connected", "Connected", new string[0])]
        [Xunit.InlineDataAttribute("0", "2", "Connected", "Connected", new string[0])]
        [Xunit.InlineDataAttribute("0", "3", "Connected", "Connected", new string[0])]
        [Xunit.InlineDataAttribute("0", "4", "Connected", "Connected", new string[0])]
        [Xunit.InlineDataAttribute("0", "5", "Connected", "Connected", new string[0])]
        [Xunit.InlineDataAttribute("0", "6", "Connected", "Connected", new string[0])]
        public virtual void ControlModeSwitchesForMode0(string mode_A, string mode_B, string state_A, string state_B, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Mode_A", mode_A);
            argumentsOfScenario.Add("Mode_B", mode_B);
            argumentsOfScenario.Add("State_A", state_A);
            argumentsOfScenario.Add("State_B", state_B);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Control mode switches for mode 0", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given(string.Format("Control mode is set to {0}", mode_A), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.And("Read the control state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 7
 testRunner.And(string.Format("Control state is {0}", state_A), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 8
 testRunner.And(string.Format("Control mode is set to {0}", mode_B), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
 testRunner.When("Read the control state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
 testRunner.Then(string.Format("Control state should be {0}", state_B), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Control mode switches for mode 1 to 6")]
        [Xunit.TraitAttribute("FeatureTitle", "RDS")]
        [Xunit.TraitAttribute("Description", "Control mode switches for mode 1 to 6")]
        [Xunit.InlineDataAttribute("1", "0", "Disconnected", "Connected", new string[0])]
        [Xunit.InlineDataAttribute("1", "2", "Ready for Reconnection", "Ready for Reconnection", new string[0])]
        [Xunit.InlineDataAttribute("1", "3", "Connected", "Connected", new string[0])]
        [Xunit.InlineDataAttribute("1", "4", "Disconnected", "Disconnected", new string[0])]
        [Xunit.InlineDataAttribute("1", "5", "Connected", "Connected", new string[0])]
        [Xunit.InlineDataAttribute("1", "6", "Ready for Reconnection", "Ready for Reconnection", new string[0])]
        [Xunit.InlineDataAttribute("2", "0", "Disconnected", "Connected", new string[0])]
        [Xunit.InlineDataAttribute("2", "1", "Ready for Reconnection", "Ready for Reconnection", new string[0])]
        [Xunit.InlineDataAttribute("2", "3", "Connected", "Connected", new string[0])]
        [Xunit.InlineDataAttribute("2", "4", "Disconnected", "Disconnected", new string[0])]
        [Xunit.InlineDataAttribute("2", "5", "Connected", "Connected", new string[0])]
        [Xunit.InlineDataAttribute("2", "6", "Ready for Reconnection", "Ready for Reconnection", new string[0])]
        [Xunit.InlineDataAttribute("3", "0", "Disconnected", "Connected", new string[0])]
        [Xunit.InlineDataAttribute("3", "1", "Ready for Reconnection", "Ready for Reconnection", new string[0])]
        [Xunit.InlineDataAttribute("3", "2", "Connected", "Connected", new string[0])]
        [Xunit.InlineDataAttribute("3", "4", "Disconnected", "Disconnected", new string[0])]
        [Xunit.InlineDataAttribute("3", "5", "Connected", "Connected", new string[0])]
        [Xunit.InlineDataAttribute("3", "6", "Ready for Reconnection", "Ready for Reconnection", new string[0])]
        [Xunit.InlineDataAttribute("4", "0", "Disconnected", "Connected", new string[0])]
        [Xunit.InlineDataAttribute("4", "1", "Ready for Reconnection", "Ready for Reconnection", new string[0])]
        [Xunit.InlineDataAttribute("4", "2", "Connected", "Connected", new string[0])]
        [Xunit.InlineDataAttribute("4", "3", "Disconnected", "Disconnected", new string[0])]
        [Xunit.InlineDataAttribute("4", "5", "Connected", "Connected", new string[0])]
        [Xunit.InlineDataAttribute("4", "6", "Ready for Reconnection", "Ready for Reconnection", new string[0])]
        [Xunit.InlineDataAttribute("5", "0", "Disconnected", "Connected", new string[0])]
        [Xunit.InlineDataAttribute("5", "1", "Ready for Reconnection", "Ready for Reconnection", new string[0])]
        [Xunit.InlineDataAttribute("5", "2", "Connected", "Connected", new string[0])]
        [Xunit.InlineDataAttribute("5", "3", "Disconnected", "Disconnected", new string[0])]
        [Xunit.InlineDataAttribute("5", "4", "Connected", "Connected", new string[0])]
        [Xunit.InlineDataAttribute("5", "6", "Ready for Reconnection", "Ready for Reconnection", new string[0])]
        [Xunit.InlineDataAttribute("6", "0", "Disconnected", "Connected", new string[0])]
        [Xunit.InlineDataAttribute("6", "1", "Ready for Reconnection", "Ready for Reconnection", new string[0])]
        [Xunit.InlineDataAttribute("6", "2", "Connected", "Connected", new string[0])]
        [Xunit.InlineDataAttribute("6", "3", "Disconnected", "Disconnected", new string[0])]
        [Xunit.InlineDataAttribute("6", "4", "Connected", "Connected", new string[0])]
        [Xunit.InlineDataAttribute("6", "5", "Ready for Reconnection", "Ready for Reconnection", new string[0])]
        public virtual void ControlModeSwitchesForMode1To6(string mode_A, string mode_B, string state_A, string state_B, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Mode_A", mode_A);
            argumentsOfScenario.Add("Mode_B", mode_B);
            argumentsOfScenario.Add("State_A", state_A);
            argumentsOfScenario.Add("State_B", state_B);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Control mode switches for mode 1 to 6", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 22
 testRunner.Given(string.Format("Control mode is set to {0}", mode_A), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 23
 testRunner.And("Read the Control state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
 testRunner.And(string.Format("Set the control state to {0}", state_A), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.And(string.Format("Control mode is set to {0}", mode_B), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
 testRunner.When("Read the Control state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 27
 testRunner.Then(string.Format("Control state should be {0}", state_B), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                RDSFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                RDSFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
